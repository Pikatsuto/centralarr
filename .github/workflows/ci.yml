name: CentralArr CI

on:
  push:
    branches:
      - '**'

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/centralarr

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (optionnel) setup QEMU si besoin d'archi cross-plateforme Docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            venv
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-asyncio respx

      - name: Run Python tests with pytest
        working-directory: backend
        run: |
          pytest --maxfail=5 --disable-warnings -q

      - name: Set build version env
        id: version
        run: |
          BRANCH=$(echo "${GITHUB_REF#refs/heads/}" | sed 's/\//-/g')
          DATE=$(date +%Y%m%d-%H%M)
          if [[ "$BRANCH" == "main" ]]; then
            VERSION="$DATE"
            TAGS="$VERSION,latest"
            IS_STABLE="true"
          else
            VERSION="$DATE-$BRANCH"
            TAGS="$VERSION"
            IS_STABLE="false"
          fi
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV
          echo "DOCKER_TAGS=$TAGS" >> $GITHUB_ENV
          echo "IS_STABLE=$IS_STABLE" >> $GITHUB_ENV

      - name: Build .deb package
        run: |
          make build-deb

      - name: List .deb output
        run: ls -lh makedeb/output/ | grep .deb

      # Build Docker image
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg BUILD_VERSION=${{ env.BUILD_VERSION }} \
            -t $IMAGE_NAME:${{ env.BUILD_VERSION }} \
            -t $IMAGE_NAME:latest \
            -f Dockerfile .
      
      # Test healthcheck (lance le conteneur, attends healthy, kill)
      - name: Run container and wait for healthcheck
        run: |
          CID=$(docker run -d -p 5000:5000 $IMAGE_NAME:${{ env.BUILD_VERSION }})
          for i in {1..20}; do
            STATUS=$(docker inspect --format='{{json .State.Health.Status}}' $CID)
            echo "Health status: $STATUS"
            [ "$STATUS" = '"healthy"' ] && break
            sleep 5
          done
          if [ "$STATUS" != '"healthy"' ]; then
            docker logs $CID
            docker rm -f $CID
            echo "Container failed healthcheck!"
            exit 1
          fi
          docker rm -f $CID

      # Push Docker image
      - name: Push Docker image ${{ env.BUILD_VERSION }} (+ latest si main)
        run: |
          for t in $(echo $DOCKER_TAGS | tr ',' ' '); do
            docker push $IMAGE_NAME:$t
          done

      # Upload .deb to a pre-release GitHub Release (or as release if on main)
      - name: Get version for release
        run: echo "RELEASE_VERSION=${{ env.BUILD_VERSION }}" >> $GITHUB_ENV

      - name: Create release â€“ pre-release by default, or stable on main
        uses: softprops/action-gh-release@v2
        with:
          name: "CentralArr ${{ env.BUILD_VERSION }}"
          tag_name: centralarr-${{ env.BUILD_VERSION }}
          prerelease: ${{ env.IS_STABLE == 'false' }}
          files: |
            makedeb/output/*.deb